package com.lead.fund.base.server.mp.controller;

import cn.hutool.core.collection.CollUtil;
import cn.hutool.json.JSONUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
import com.lead.fund.base.common.basic.exec.BusinessException;
import com.lead.fund.base.common.basic.model.OptionItem;
import com.lead.fund.base.common.basic.response.DataResult;
import com.lead.fund.base.common.basic.response.PageDataResult;
import com.lead.fund.base.common.basic.response.PageResult;
import com.lead.fund.base.common.basic.response.Result;
import com.lead.fund.base.common.database.entity.AbstractPrimaryKey;
import com.lead.fund.base.common.database.util.DatabaseUtil;
import com.lead.fund.base.common.util.DateUtil;
import com.lead.fund.base.common.util.MultitaskUtil;
import com.lead.fund.base.common.util.StrUtil;
import com.lead.fund.base.server.mp.dao.TemplateAttachmentDao;
import com.lead.fund.base.server.mp.dao.TroubleAttachmentDao;
import com.lead.fund.base.server.mp.dao.TroubleAttachmentDao;
import com.lead.fund.base.server.mp.entity.dmmp.MpUserEntity;
import com.lead.fund.base.server.mp.entity.douson.*;
import com.lead.fund.base.server.mp.helper.AccountHelper;
import com.lead.fund.base.server.mp.mapper.dmmp.MpUserMapper;
import com.lead.fund.base.server.mp.mapper.douson.TemplateAttachmentMapper;
import com.lead.fund.base.server.mp.mapper.douson.TemplateMapper;
import com.lead.fund.base.server.mp.mapper.douson.TroubleAttachmentMapper;
import com.lead.fund.base.server.mp.mapper.douson.TroubleMapper;
import com.lead.fund.base.server.mp.mapper.douson.TroubleAttachmentMapper;
import com.lead.fund.base.server.mp.mapper.douson.TroubleMapper;
import com.lead.fund.base.server.mp.model.FileModel;
import com.lead.fund.base.server.mp.model.PhotoImgModel;
import com.lead.fund.base.server.mp.request.*;
import com.lead.fund.base.server.mp.response.TemplateResponse;
import com.lead.fund.base.server.mp.response.TemplateSummaryResponse;
import com.lead.fund.base.server.mp.response.VocationResponse;
import com.lead.fund.base.server.mp.response.VocationResponse;
import com.lead.fund.base.server.mp.response.VocationSummaryResponse;
import com.lead.fund.base.server.mp.response.TroubleResponse;
import com.lead.fund.base.server.mp.response.TroubleResponse;
import com.lead.fund.base.server.mp.response.MpUserResponse;
import com.lead.fund.base.server.mp.response.ParamConfigResponse;
import com.lead.fund.base.server.mp.response.TroubleResponse;
import com.lead.fund.base.server.mp.response.TroubleResponse;
import jakarta.annotation.Resource;
import java.math.BigDecimal;
import java.util.Collection;
import org.mapstruct.Mapping;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static com.lead.fund.base.common.basic.cons.BasicConst.REQUEST_METHOD_KEY_DEVICE_ID;
import static com.lead.fund.base.common.basic.cons.frame.ExceptionType.AUTHORITY_AUTH_FAIL;
import static com.lead.fund.base.common.util.BeanUtil.defaultIfNull;
import static com.lead.fund.base.common.util.StrUtil.isNotBlank;
import static com.lead.fund.base.server.mp.converter.IndustryConverter.INDUSTRY_INSTANCE;

public class Test {

    private void mergeRelevance(TemplateRequest request, TemplateEntity e) {
        templateAttachmentMapper.delete(new LambdaUpdateWrapper<TemplateAttachmentEntity>()
                .eq(TemplateAttachmentEntity::getTemplateId, e.getId())
        );
        templateAttachmentDao.saveBatch(
                Stream.of(
                                CollUtil.defaultIfEmpty(request.getPhotoList(), new ArrayList<>())
                                        .stream()
                                        .map(t -> INDUSTRY_INSTANCE.templateAttachment(e.getId(), "0", t)),
                                CollUtil.defaultIfEmpty(request.getFileList(), new ArrayList<>())
                                        .stream()
                                        .map(t -> INDUSTRY_INSTANCE.templateAttachment(e.getId(), "1", t))
                        ).flatMap(t -> t)
                        .collect(Collectors.toList())
        );
    }

    /**
     * 保存供应商刀具模板
     *
     * @param deviceId 设备id
     * @param request  {@link TemplateRequest}
     * @return {@link Result}
     */
    @PostMapping("admin/template")
    @Transactional(value = "dousonDataSourceTransactionManager", propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, rollbackFor = Exception.class)
    public Result templateSave(
            @RequestHeader(value = REQUEST_METHOD_KEY_DEVICE_ID) String deviceId,
            @RequestBody TemplateRequest request
    ) {
        final MpUserResponse u = accountHelper.getUser(deviceId);
        TemplateEntity e;
        templateMapper.insert(e = (TemplateEntity) INDUSTRY_INSTANCE.template(request)
                .setBrokenReason("," + String.join(",", request.getBrokenReasonList()) + ",")
                .setPartyUser("," + String.join(",", request.getPartyUserList()) + ",")
                .setCreator(u.getUserId())
                .setModifier(u.getUserId()));
        mergeRelevance(request, e);
        return new Result();
    }

    /**
     * 修改供应商刀具模板
     *
     * @param deviceId 设备id
     * @param request  {@link TemplateRequest}
     * @return {@link Result}
     */
    @PutMapping("admin/template")
    public Result templateUpdate(
            @RequestHeader(value = REQUEST_METHOD_KEY_DEVICE_ID) String deviceId,
            @RequestBody TemplateRequest request
    ) {
        MpUserResponse u;
        try {
            u = accountHelper.getUser(deviceId);
        } catch (Exception e) {
            u = new MpUserResponse();
        }
        TemplateEntity e = (TemplateEntity) INDUSTRY_INSTANCE.template(request)
                .setBrokenReason("," + String.join(",", request.getBrokenReasonList()) + ",")
                .setPartyUser("," + String.join(",", request.getPartyUserList()) + ",")
                .setModifier(u.getUserId());
        LambdaUpdateWrapper<TemplateEntity> lambda = new LambdaUpdateWrapper<TemplateEntity>()
                .eq(TemplateEntity::getId, e.getId());
        if (u.getRoleCodeList().stream().noneMatch(t -> "admin".equals(t) || "templateView".equals(t))) {
            lambda.eq(TemplateEntity::getPartyUser, u.getUserId());
        }
        if (!"admin".equals(u.getUsername())) {
            lambda.eq(TemplateEntity::getValid, false);
        }
        if (templateMapper.update(
                e,
                lambda
        ) <= 0) {
            throw new BusinessException(AUTHORITY_AUTH_FAIL);
        }
        mergeRelevance(request, e);
        return new Result();
    }

    /**
     * 删除供应商刀具模板
     *
     * @param deviceId 设备id
     * @param request  {@link TemplateRequest}
     * @return {@link Result}
     */
    @DeleteMapping("admin/template")
    public Result templateDelete(
            @RequestHeader(value = REQUEST_METHOD_KEY_DEVICE_ID) String deviceId,
            @ModelAttribute TemplateRequest request
    ) {
        MpUserResponse u = accountHelper.getUser(deviceId);
        if (!"admin".equals(u.getUsername())) {
            throw new BusinessException(AUTHORITY_AUTH_FAIL);
        }
        LambdaUpdateWrapper<TemplateEntity> lambda = new LambdaUpdateWrapper<TemplateEntity>().eq(TemplateEntity::getId, request.getTemplateId());
        if (isNotBlank(request.getTemplateId())) {
            if (templateMapper.delete(lambda) <= 0) {
                throw new BusinessException(AUTHORITY_AUTH_FAIL);
            }
        }
        return new Result();
    }

    private LambdaQueryWrapper<TemplateEntity> templateLambda(TemplateRequest request) {
        final LambdaQueryWrapper<TemplateEntity> lambda = new LambdaQueryWrapper<>();
        if (isNotBlank(request.getTemplateId())) {
            lambda.eq(TemplateEntity::getId, request.getTemplateId());
        }
        if (null != request.getStartDate()) {
            lambda.ge(TemplateEntity::getDate, DateUtil.day(request.getStartDate()));
        }
        if (null != request.getEndDate()) {
            lambda.le(TemplateEntity::getDate, DateUtil.day(cn.hutool.core.date.DateUtil.endOfDay(request.getEndDate())));
        }
        if (isNotBlank(request.getQueryUserId())) {
            lambda.like(TemplateEntity::getPartyUser, "," + request.getQueryUserId() + ",");
        }
        if (isNotBlank(request.getPartyUser())) {
            lambda.like(TemplateEntity::getPartyUser, "," + request.getPartyUser() + ",");
        }
        if (isNotBlank(request.getBrokenReason())) {
            lambda.like(TemplateEntity::getBrokenReason, "," + request.getBrokenReason() + ",");
        }
        if (isNotBlank(request.getEquipmentId())) {
            lambda.eq(TemplateEntity::getEquipmentId, request.getEquipmentId());
        }
        if (CollUtil.isNotEmpty(request.getBrokenReasonList())) {
            DatabaseUtil.or(lambda, request.getBrokenReasonList(), (lam, l) -> lam.in(TemplateEntity::getBrokenReason, l));
        }
        return lambda.orderByDesc(TemplateEntity::getCreatedTime);
    }

    private List<TemplateEntity> templateList(TemplateRequest request) {
        return templateMapper.selectList(templateLambda(request)
                .select(
                        TemplateEntity::getId,
                        TemplateEntity::getCreator,
                        TemplateEntity::getLastModifiedTime,
                        TemplateEntity::getDeletedFlag,
                        TemplateEntity::getCreator,
                        TemplateEntity::getModifier,
                        TemplateEntity::getRemark,
                        TemplateEntity::getDate,
                        TemplateEntity::getEquipmentId,
                        TemplateEntity::getBrokenReason,
                        TemplateEntity::getBrokenContent,
                        TemplateEntity::getRepairContent,
                        TemplateEntity::getReplacePair,
                        TemplateEntity::getRepairType,
                        TemplateEntity::getStopHour,
                        TemplateEntity::getPartyUser,
                        TemplateEntity::getValid
                )
        );
    }

    private TemplateSummaryResponse defaultTemplateSummary() {
        return new TemplateSummaryResponse().setStopHour(BigDecimal.ZERO);
    }

    private TemplateSummaryResponse templateSummary(TemplateRequest request) {
        return templateMapper.selectList(
                        templateLambda(request)
                                .isNotNull(TemplateEntity::getStopHour)
                                .select(TemplateEntity::getSumStopHour)
                ).stream().findFirst()
                .map(t -> new TemplateSummaryResponse().setStopHour(t.getSumStopHour()))
                .orElse(defaultTemplateSummary());
    }

    private List<TemplateResponse> formatTemplateList(List<TemplateEntity> l) {
        final List<TemplateResponse> list = INDUSTRY_INSTANCE.templateList(l);
        List<String> userIdList = Stream.of(
                        list.stream().map(TemplateResponse::getPartyUserList).flatMap(Collection::stream).filter(StrUtil::isNotBlank)
                )
                .flatMap(t -> t)
                .distinct()
                .collect(Collectors.toList());
        final List<MpUserEntity> userList = CollUtil.isEmpty(userIdList) ? new ArrayList<>() : userMapper.selectList(
                DatabaseUtil.or(new LambdaQueryWrapper<MpUserEntity>().select(MpUserEntity::getId, MpUserEntity::getUsername, MpUserEntity::getName),
                        userIdList,
                        (lam, pl) -> lam.in(MpUserEntity::getId, pl))
        );
        final Map<String, String> um = userList.stream().collect(Collectors.toMap(MpUserEntity::getId, MpUserEntity::getName, (t, t1) -> t1));
        MultitaskUtil.supplementList(
                list,
                TemplateResponse::getTemplateId,
                l1 -> templateAttachmentMapper.selectList(new LambdaQueryWrapper<TemplateAttachmentEntity>()
                        .in(TemplateAttachmentEntity::getTemplateId, l1)),
                (t, r) -> t.getTemplateId().equals(r.getTemplateId()),
                (t, r) -> {
                    switch (r.getAttachmentCategory()) {
                        case "0" -> t.getPhotoList().add(
                                INDUSTRY_INSTANCE.templatePhoto(r, urlHelper.getUrlPrefix())
                        );
                        case "1" -> t.getFileList().add(
                                INDUSTRY_INSTANCE.templateFile(r, urlHelper.getUrlPrefix())
                        );
                    }
                }
        );
        MultitaskUtil.supplementList(
                list.stream().filter(t -> isNotBlank(t.getEquipmentId())).collect(Collectors.toList()),
                TemplateResponse::getEquipmentId,
                l1 -> equipmentMapper.selectList(new LambdaQueryWrapper<EquipmentEntity>()
                        .in(EquipmentEntity::getId, l1)),
                (t, r) -> t.getEquipmentId().equals(r.getId()),
                (t, r) -> {
                    t.setEquipmentNo(r.getEquipmentNo())
                            .setPosition(r.getPosition())
                            .setEquipmentName(r.getEquipmentName())
                    ;
                }
        );
        MultitaskUtil.supplementList(
                list.stream().filter(t -> isNotBlank(t.getPosition())).collect(Collectors.toList()),
                TemplateResponse::getPosition,
                l1 -> paramDao.listByCategoryId("equipmentPosition"),
                (r, t) -> r.getPosition().equals(t.getValue()),
                (r, t) -> r.setPositionFormat(t.getLabel())
        );
        MultitaskUtil.supplementList(
                list.stream().filter(t -> isNotBlank(t.getRepairType())).collect(Collectors.toList()),
                TemplateResponse::getRepairType,
                l1 -> paramDao.listByCategoryId("repairType"),
                (r, t) -> r.getRepairType().equals(t.getValue()),
                (r, t) -> r.setRepairTypeFormat(t.getLabel())
        );
        final Map<Object, String> m = paramDao.listByCategoryId("brokenReason").stream().collect(Collectors.toMap(ParamConfigResponse::getValue, OptionItem::getLabel, (t, t1) -> t1));
        for (TemplateResponse t : list) {
            t.setBrokenReasonFormat(t.getBrokenReasonList().stream().filter(StrUtil::isNotBlank).map(t1 -> m.getOrDefault(t1, t1)).collect(Collectors.joining(",")));
            t.setPartyUserFormat(t.getPartyUserList().stream().filter(StrUtil::isNotBlank).map(t1 -> um.getOrDefault(t1, t1)).collect(Collectors.joining(",")));
        }
        return list;
    }

    /**
     * 供应商刀具模板列表
     *
     * @param deviceId 设备id
     * @param request  {@link MpAccountQueryPageRequest}
     * @return {@link PageResult <TemplateResponse>}
     */
    @GetMapping("admin/template/page")
    public PageDataResult<TemplateResponse, TemplateSummaryResponse> templateAdminPage(
            @RequestHeader(value = REQUEST_METHOD_KEY_DEVICE_ID) String deviceId,
            @ModelAttribute TemplatePageRequest request
    ) {
        MpUserResponse u = accountHelper.getUser(deviceId);
        if (u.getRoleCodeList().stream().noneMatch(t -> "admin".equals(t) || "templateView".equals(t))) {
            request.getData().setQueryUserId(u.getUserId());
        }
        final PageResult<TemplateEntity> page = DatabaseUtil.page(request, this::templateList);
        final AtomicInteger atomicInteger = new AtomicInteger((request.getPage().getPage() - 1) * request.getPage().getLimit());
        return new PageDataResult<>(
                page.getTotal(),
                formatTemplateList(page.getList())
                        .stream().peek(t -> t.setIndex(atomicInteger.addAndGet(1))).collect(Collectors.toList()),
                page.getTotal() > 0 ? templateSummary(request.getData()) : defaultTemplateSummary()
        );
    }

    /**
     * 供应商刀具模板（公开）
     *
     * @param request {@link TemplateRequest}
     * @return {@link DataResult <TemplateResponse>}
     */
    @GetMapping("template")
    public DataResult<TemplateResponse> template(
            @ModelAttribute TemplateRequest request
    ) {
        return new DataResult<>(
                defaultIfNull(CollUtil.getFirst(formatTemplateList(templateList(request))), new TemplateResponse())
        );
    }

}
